name: Nix

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  integration:
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        # aarch64-linux and friends require emulation, which is terribly slow.
        # so slow, that the test doesn't pass.
        # i686 got dropped somewhere around 24.05
        # TODO: set up aarch64 worker?
        system: [x86_64]
        check: [loop, tcp, tcp-ipv6, rdma]
    name: ${{ matrix.system }} - ${{ matrix.check }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup QEMU User and binfmt
      uses: docker/setup-qemu-action@v3
      if: ${{ matrix.system != 'x86_64' && matrix.system != 'i686' }}
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main
      with:
        extra-conf: "extra-platforms = ${{ matrix.system }}-linux"
    - name: Setup Cache Nix Action
      uses: nix-community/cache-nix-action@v6
      with:
        # restore and save a cache using this key
        primary-key: nix-tests-${{ matrix.system }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-tests-${{ matrix.system }}-
        # collect garbage until Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        # 1G = 1073741824
        gc-max-store-size-linux: 1G
        # do purge caches
        purge: true
        # purge all versions of the cache
        purge-prefixes: nix-tests-${{ matrix.system }}-
        # created more than this number of seconds ago
        # relative to the start of the `Post Restore and save Nix store` phase
        purge-created: 0
        # except any version with the key that is the same as the `primary-key`
        purge-primary-key: never
    - name: Run Flake Check
      run: nix build -L .#checks.${{ matrix.system }}-linux.${{ matrix.check }}
    - name: Copy coverage to current directory
      run: cp $(nix eval --raw .#checks.${{ matrix.system }}-linux.${{ matrix.check }})/nvmet.lcov .
    - name: Upload to codecov.io
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
        file: nvmet.lcov
        name: ${{ matrix.system }}-${{ matrix.check }}
