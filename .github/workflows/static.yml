name: Static

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        system: [x86_64, i686, aarch64]
    name: ${{ matrix.system }}
    steps:
    - uses: actions/checkout@v4
    - name: Setup QEMU User and binfmt
      uses: docker/setup-qemu-action@v3
      if: ${{ matrix.system != 'x86_64' && matrix.system != 'i686' }}
    - name: Install Nix
      uses: DeterminateSystems/nix-installer-action@main
      with:
        extra-conf: "extra-platforms = ${{ matrix.system }}-linux"
    - name: Setup Cache Nix Action
      uses: nix-community/cache-nix-action@v6
      with:
        # restore and save a cache using this key
        primary-key: nix-${{ runner.os }}-${{ matrix.system }}-${{ hashFiles('**/*.nix', '**/flake.lock') }}
        # if there's no cache hit, restore a cache by this prefix
        restore-prefixes-first-match: nix-${{ runner.os }}-${{ matrix.system }}-
        # collect garbage until Nix store size (in bytes) is at most this number
        # before trying to save a new cache
        # 1G = 1073741824
        gc-max-store-size-linux: 1G
        # do purge caches
        purge: true
        # purge all versions of the cache
        purge-prefixes: nix-${{ runner.os }}-
        # created more than this number of seconds ago
        # relative to the start of the `Post Restore and save Nix store` phase
        purge-created: 0
        # except any version with the key that is the same as the `primary-key`
        purge-primary-key: never
    - name: Build static binary
      run: |
        FLAKEREF=.#packages.${{ matrix.system }}-linux.nvmetcfg-static
        nix build -L $FLAKEREF
        echo "nvmetBinary=$(nix eval --raw $FLAKEREF)/bin/nvmet" >> $GITHUB_ENV
    - name: Upload workflow artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nvmet-${{ matrix.system }}
        path: ${{ env.nvmetBinary }}
